"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8218],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>u});var a=t(7294);function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){s(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function r(e,n){if(null==e)return{};var t,a,s=function(e,n){if(null==e)return{};var t,a,s={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(s[t]=e[t]);return s}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var l=a.createContext({}),c=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=c(e.components);return a.createElement(l.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,s=e.mdxType,i=e.originalType,l=e.parentName,p=r(e,["components","mdxType","originalType","parentName"]),d=c(t),u=s,k=d["".concat(l,".").concat(u)]||d[u]||m[u]||i;return t?a.createElement(k,o(o({ref:n},p),{},{components:t})):a.createElement(k,o({ref:n},p))}));function u(e,n){var t=arguments,s=n&&n.mdxType;if("string"==typeof e||s){var i=t.length,o=new Array(i);o[0]=d;var r={};for(var l in n)hasOwnProperty.call(n,l)&&(r[l]=n[l]);r.originalType=e,r.mdxType="string"==typeof e?e:s,o[1]=r;for(var c=2;c<i;c++)o[c]=t[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},573:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>r,toc:()=>c});var a=t(7462),s=(t(7294),t(3905));const i={title:"FSM"},o=void 0,r={unversionedId:"lab-handouts/exp-7-w",id:"version-Summer22/lab-handouts/exp-7-w",title:"FSM",description:"Wadhwani Electronics Lab, IIT Bombay",source:"@site/versioned_docs/version-Summer22/lab-handouts/exp-7-w.mdx",sourceDirName:"lab-handouts",slug:"/lab-handouts/exp-7-w",permalink:"/docs/Summer22/lab-handouts/exp-7-w",draft:!1,tags:[],version:"Summer22",frontMatter:{title:"FSM"}},l={},c=[{value:"Handout",id:"handout",level:2},{value:"Skeleton code",id:"skeleton-code",level:2},{value:"Sequence Detector (&quot;covid&quot;)",id:"sequence-detector-covid",level:3},{value:"Test module",id:"test-module",level:3}],p={toc:c};function m(e){let{components:n,...i}=e;return(0,s.kt)("wrapper",(0,a.Z)({},p,i,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"Wadhwani Electronics Lab, IIT Bombay",(0,s.kt)("br",null),"\nWednesday 13th October, 2021",(0,s.kt)("br",null)),(0,s.kt)("hr",null),(0,s.kt)("h2",{id:"handout"},"Handout"),(0,s.kt)("p",null,'Today\'s experiment is a natural extension of the last week\'s experiment.\nIn previous experiment you had built the sequence detector to detect sequence "krypton",\ntoday you are going to display same on LCD when "krypton" is detected by the sequence detector.'),(0,s.kt)("div",{class:"fig_b"},(0,s.kt)("img",{src:t(8207).Z})),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Once 'k' is detected O/p on LCD should be ",(0,s.kt)("inlineCode",{parentName:"li"},"k<blankspace><blankspace><blankspace><blankspace><blankspace><blankspace>")),(0,s.kt)("li",{parentName:"ul"},"Take 5 bit input from switches(S5-S1)"),(0,s.kt)("li",{parentName:"ul"},'Letter Encoding a = "00001", b = "00010" and so on.')),(0,s.kt)("p",null,"Below are the pin mapping for the Krypton board"),(0,s.kt)("div",{class:"fig_b"},(0,s.kt)("img",{src:t(7266).Z})),(0,s.kt)("div",{class:"fig_b"},(0,s.kt)("img",{src:t(8534).Z})),(0,s.kt)("div",{class:"fig_b"},(0,s.kt)("img",{src:t(7918).Z})),(0,s.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"To display 'a' on LCD, use ASCII representation of 'a'\nASCII 'a' = 97 => ",(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,s.kt)("mn",{parentName:"mrow"},"01100001"),(0,s.kt)("msub",{parentName:"mrow"},(0,s.kt)("mo",{parentName:"msub",stretchy:"false"},")"),(0,s.kt)("mn",{parentName:"msub"},"2"))),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"(01100001)_2")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,s.kt)("span",{parentName:"span",className:"mopen"},"("),(0,s.kt)("span",{parentName:"span",className:"mord"},"01100001"),(0,s.kt)("span",{parentName:"span",className:"mclose"},(0,s.kt)("span",{parentName:"span",className:"mclose"},")"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.3011em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-2.55em",marginLeft:"0em",marginRight:"0.05em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mtight"},"2")))),(0,s.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,s.kt)("span",{parentName:"span"}))))))))))," =>",(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,s.kt)("mi",{parentName:"mrow"},"C"),(0,s.kt)("mn",{parentName:"mrow"},"1"),(0,s.kt)("msub",{parentName:"mrow"},(0,s.kt)("mo",{parentName:"msub",stretchy:"false"},")"),(0,s.kt)("mn",{parentName:"msub"},"16"))),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"(C1)_{16}")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,s.kt)("span",{parentName:"span",className:"mopen"},"("),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.07153em"}},"C"),(0,s.kt)("span",{parentName:"span",className:"mord"},"1"),(0,s.kt)("span",{parentName:"span",className:"mclose"},(0,s.kt)("span",{parentName:"span",className:"mclose"},")"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.3011em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-2.55em",marginLeft:"0em",marginRight:"0.05em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mtight"},"16"))))),(0,s.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,s.kt)("span",{parentName:"span"}))))))))))))),(0,s.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},' So once the "krypton" pattern is detected, you get the final output, and the state immediately changes to the init state in one clock cycle.\nSo for a maximum of one clock cycle, LCD will display the sequence "krypton".\nTo observe the final output on LCD ("krypton" sequence) a little longer,\nyou need to add another if-else structure in the else part of the init state where you will display\nthe final output once more when the out_sig signal is \'1\'.\nThe other alternative can be to add one more state in your FSM, which will display the final output for one more clock cycle.'))),(0,s.kt)("hr",null),(0,s.kt)("h2",{id:"skeleton-code"},"Skeleton code"),(0,s.kt)("h3",{id:"sequence-detector-covid"},'Sequence Detector ("covid")'),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-vhdl"},'\nlibrary ieee;\nuse ieee.std_logic_1164.all;\nuse ieee.numeric_std.all;\n\nentity krypton is\nport(   inp:in std_logic_vector(4 downto 0);\n        reset,clock:in std_logic;\n        outp: out std_logic;\n        out_ascii: out std_logic_vector(55 downto 0));\nend krypton;\n\narchitecture rch of krypton is\n\n---------------Define state type here-----------------------------\ntype state is (init,s1,s2,s3,s4,s5,s6);\n---------------Define signals of state type-----------------------\nsignal y_present,y_next: state:=init;\nsignal out_sig: std_logic;\n\nbegin\nclock_proc:process(clock,reset)\nbegin\n    if(clock=\'1\' and clock\' event) then\n        if(reset=\'1\') then\n            y_present<=init;\n        else\n            y_present<=y_next;\n        end if;\n    end if;\n    \nend process;\n\n/// To display "abcdefg", the value of out_ascii = x"61_62_63_64_65_66_67"\n/// To display "ab", the value of out_ascii    = x"61_62_20_20_20_20_20"\n/// ASCII representation for blank space in Hex = x"20"\n\nstate_transition_proc:process(inp,y_present)\nbegin\n    case y_present is\n        when init=>\n            if(unsigned(inp)=11) then   --k\n                /////assign next state//////\n                /////assign out_ascii value /////// \n                        else\n                if (out_sig = \'1\') then\n                    /////assign out_ascii value ///////\n                else            \n                    /////assign out_ascii value ///////\n                end if; \n                /////assign next state//////\n            end if;\n            out_sig<=\'0\';\n        when s1=>\n        /////// Fill the rest of the code //////\n        end case;\nend process;\n\noutp <= out_sig;\n\nend rch;\n\n')),(0,s.kt)("h3",{id:"test-module"},"Test module"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-vhdl"},"\nlibrary ieee;\nuse ieee.std_logic_1164.all;\nuse ieee.std_logic_unsigned.all; \nuse ieee.numeric_std.all;\n\nentity test is\n    port( clk_slow      : in std_logic;\n          inp           : in std_logic_vector(4 downto 0);\n          clk           : in  std_logic;\n          rst           : in  std_logic;\n          lcd_rw        : out std_logic;                            --read & write control\n          lcd_en        : out std_logic;                            --enable control\n          lcd_rs        : out std_logic;                            --data or command control\n          lcd1          : out std_logic_vector(7 downto 0);         --see pin planning in krypton manual \n          b11           : out std_logic;\n          b12           : out std_logic;\n          detect        : out std_logic\n          );\nend entity; \n\narchitecture behave of test is\n\n--  LCD Interfacing signals\n    signal erase        : std_logic := '0';                  \n    signal put_char     : std_logic := '1';\n    signal write_data   : std_logic_vector(7 downto 0)  := \"00000000\";\n    signal write_row    : std_logic_vector( 0 downto 0) := \"0\";\n    signal write_column : std_logic_vector(3 downto 0) := \"0000\";\n    signal ack          : std_logic;\n    signal i            : integer := 0;\n    \n-- covid_det signals\n    signal ascii_value  : std_logic_vector(55 downto 0);\n\n-- Clock signal for LCD module  \n    signal lcd_clk      : std_logic := '0';\n\n-- Component Declaration\n    component krypton is\n    port(   inp:in std_logic_vector(4 downto 0);\n            reset,clock:in std_logic;\n            outp: out std_logic;\n            out_ascii: out std_logic_vector(55 downto 0));\n    end component;\n\n    component lcd_controller is\n    port (  clk    : in std_logic;                          --clock i/p\n            rst    : in std_logic;                          -- reset\n            erase : in std_logic;                           --- clear position\n            put_char : in std_logic;\n            write_data : in std_logic_vector(7 downto 0) ;\n            write_row : in std_logic_vector(0 downto 0);\n            write_column : in std_logic_vector(3 downto 0);\n            ack : out std_logic;\n            lcd_rw : out std_logic;                         --read & write control\n            lcd_en : out std_logic;                         --enable control\n            lcd_rs : out std_logic;                         --data or command control\n            lcd1  : out std_logic_vector(7 downto 0);\n            b11 : out std_logic;\n            b12 : out std_logic);     --data line\n    end component lcd_controller;\n\nbegin\n        \n    ------------------------------------------------------------------------------------\n    process(clk)--50Mhz/200000 = 250Hz\n        variable div_clk: integer := 0;\n    begin\n        if rising_edge(clk) then\n            div_clk := div_clk + 1;\n            if div_clk = 100000 then\n                lcd_clk <= '1';\n            elsif div_clk = 200000 then\n                lcd_clk <= '0';\n                div_clk := 0;\n            end if;\n        end if; \n    end process;\n\n    krypton_det_instance : krypton port map(\n                    inp         => inp,\n                    reset       => rst,\n                    clock       => clk_slow,\n                    outp        => detect,\n                    out_ascii   => ascii_value);\n\n    \n    lcd_instance : lcd_controller port map (\n                    clk             => lcd_clk, \n                    rst             => rst, \n                    erase           => erase ,\n                    put_char        => put_char ,\n                    write_data      => write_data,\n                    write_row       => write_row,\n                    write_column    => write_column ,\n                    ack             => ack, \n                    lcd_rw          => lcd_rw,\n                    lcd_en          => lcd_en,\n                    lcd_rs          => lcd_rs,\n                    lcd1            => lcd1,\n                    b11             => b11,\n                    b12             => b12);\n\n    \n    process(ack,rst,lcd_clk)\n    begin\n\n        if (rising_edge(lcd_clk)) then\n        \n            -- If reset, then put 1st char in 1st row, 1st column.  \n            if (rst = '1') then\n                erase <= '0';\n                write_row <= \"0\";\n                write_column <= \"0000\";\n                write_data <= \"00111110\"; -- Denotes > character\n                put_char <= '1';\n            end if;\n\n            --Put next character only after you have recieve acknowledgment\n            --Sequence Position\n            --  Column Number       Character\n            --      6                   k\n            --      7                   r\n            --      8                   y\n            --      9                   p\n            --      10                  t\n            --      11                  o\n            --      12                  n\n            if(ack = '1') then \n\n                if (i = 0) then\n                    i <=  i + 1;\n                    put_char <= '1';\n                    write_column <= \"0110\";\n                    write_row <= \"0\";\n                    write_data <= ascii_value(55 downto 48);\n                elsif (i = 1) then\n                    //// Complete this for i = 1,2,3,4,5,6 ////\n    \n                end if;\n            end if;\n        end if;\n    end process;\n\nend behave;\n\n\n\n\n\n\n\n")))}m.isMDXComponent=!0},8207:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/krypton-9a94807d438198939df07ba0de1af583.png"},7918:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/pin_map-b69c3ff20f05a4dc6105a2d2f155ee6c.png"},7266:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/pinmap1-9a45ced6ae1f7a07331c6abdddd84e64.png"},8534:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/pinmap2-5d9389f7be43d8e679cd531e6b987eb5.png"}}]);