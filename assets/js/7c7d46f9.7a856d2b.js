(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[406],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return d},kt:function(){return b}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=r.createContext({}),p=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},d=function(e){var n=p(e.components);return r.createElement(c.Provider,{value:n},e.children)},s={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=p(t),b=o,f=u["".concat(c,".").concat(b)]||u[b]||s[b]||i;return t?r.createElement(f,a(a({ref:n},d),{},{components:t})):r.createElement(f,a({ref:n},d))}));function b(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=u;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:o,a[1]=l;for(var p=2;p<i;p++)a[p]=t[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},4675:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return a},metadata:function(){return l},toc:function(){return c},default:function(){return d}});var r=t(2122),o=t(9756),i=(t(7294),t(3905)),a={title:"Sequence Detector - abab_baba (Structural Modelling)"},l={unversionedId:"lab-handouts/seqd2",id:"lab-handouts/seqd2",isDocsHomePage:!1,title:"Sequence Detector - abab_baba (Structural Modelling)",description:"D-Flipflop",source:"@site/docs/lab-handouts/seqd2.mdx",sourceDirName:"lab-handouts",slug:"/lab-handouts/seqd2",permalink:"/docs/lab-handouts/seqd2",version:"current",frontMatter:{title:"Sequence Detector - abab_baba (Structural Modelling)"},sidebar:"docs",previous:{title:"Sequence Detector - abab_baba (Behavioural Modelling)",permalink:"/docs/lab-handouts/seqd1"}},c=[{value:"D-Flipflop",id:"d-flipflop",children:[]},{value:"Sequence Detector - abab_baba",id:"sequence-detector---abab_baba",children:[]},{value:"DUT",id:"dut",children:[]},{value:"TRACEFILE",id:"tracefile",children:[]}],p={toc:c};function d(e){var n=e.components,t=(0,o.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h3",{id:"d-flipflop"},"D-Flipflop"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-vhdl",metastring:'title="Behavioural Description"',title:'"Behavioural','Description"':!0},"\nlibrary ieee;\nuse ieee.std_logic_1164.all;\n\npackage D_FF is\n    component dFlipFlop is\n        port(reset, inp, clock : in std_logic;\n            y : out std_logic);\n    end component;\nend package D_FF;\n\n\n-----------------------------D Flip Flop-------------------------\n\nlibrary ieee;\nuse ieee.std_logic_1164.all;\n\nentity dFlipFlop is\nport(reset, inp, clock : in std_logic;\n        y : out std_logic);\nend entity dFlipFlop;\n\narchitecture struct of dFlipFlop is\nbegin\n\n    process(clock)\n    begin\n        if (clock = '1' and clock' event) \n        then\n            if reset = '1' \n            then\n                y <= '0';\n            else\n                y <= inp;\n            end if;\n        end if;\n    end process;\n\nend struct;\n\n")),(0,i.kt)("h3",{id:"sequence-detector---abab_baba"},"Sequence Detector - abab_baba"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-vhdl",metastring:'title="Structural Modelling"',title:'"Structural','Modelling"':!0},"\nlibrary ieee;\nuse ieee.std_logic_1164.all;\nlibrary work;\nuse work.D_FF.all;\n\nentity seqDetector is\nport(reset, inp, clock : in std_logic; --inp=0 => a inp1=1 => b\n        y : out std_logic);\nend entity seqDetector;\n\narchitecture struct of seqDetector is\n\n    signal d0, d1, d2, q0, q1, q2, q0_bar, q1_bar, q2_bar, inp_bar : std_logic;\nbegin\n    q0_bar <= not q0;\n    q1_bar <= not q1;\n    q2_bar <= not q2;\n    inp_bar <= not inp;\n    \n    \n    ------------------Here we are defining the combinational block L1 whoich is the input to the FF0----------------\n    d0 <= (not reset) and ((inp_bar and q1_bar) or (q2_bar and q1_bar and q0) \n    or (q2_bar and q0 and inp_bar) or (q2 and q0_bar and inp_bar));\n    \n\n    ------------------D Flip Flop 0--------------------------------\n    dFlipFlop_0 : dFlipFlop port map(reset, d0, clock, q0);\n    \n    \n    \n    ------------------Here we are defining the combinational block L2 whoich is the input to the FF1----------------\n    d1 <= (not reset) and ((q2_bar and inp) or (q1_bar and inp));\n    \n    ------------------D Flip Flop 1--------------------------------\n    dFlipFlop_1 : dFlipFlop port map(reset, d1, clock, q1);\n    \n    \n    \n    ------------------Here we are defining the combinational block L3 whoich is the input to the FF2----------------\n    d2 <= (not reset) and ((q2_bar and inp_bar and q1) or (q0_bar and inp_bar and q1) or (q2 and q1_bar and inp));\n    \n    ------------------D Flip Flop 2--------------------------------\n    dFlipFlop_2 : dFlipFlop port map(reset, d2, clock, q2);\n\n\n    ------------------Here goes the output------------------------------\n    y<= q2 and ((q1_bar and q0 and inp) or (q1 and q0_bar and inp_bar));\n\nend struct;\n\n")),(0,i.kt)("h3",{id:"dut"},"DUT"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-vhdl"},"\n-- A DUT entity is used to wrap your design.\n--  This example shows how you can do this for the\n--  Full-adder.\n\nlibrary ieee;\nuse ieee.std_logic_1164.all;\nentity DUT is\n   port(input_vector: in std_logic_vector(2 downto 0);\n        output_vector: out std_logic_vector(0 downto 0));\nend entity;\n\narchitecture DutWrap of DUT is\n   component seqDetector is\n    port(reset, inp, clock : in std_logic;\n        y : out std_logic);\n    end component;\nbegin\n\n   -- input/output vector element ordering is critical,\n   -- and must match the ordering in the trace file!\n   seq_instance: seqDetector \n            port map (\n                    -- order of inputs Cin B A\n                    reset => input_vector(2),\n                    inp   => input_vector(1),\n                    clock   => input_vector(0),\n                                        \n                    \n                    y => output_vector(0));\n\nend DutWrap;\n\n\n\n")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"tracefile"},"TRACEFILE"),(0,i.kt)("a",{href:"https://drive.google.com/drive/folders/1a0c56zhX7aceSn8Si3ZRgvJClagDk1vU?usp=sharing"},"TRACEFILE"))}d.isMDXComponent=!0}}]);